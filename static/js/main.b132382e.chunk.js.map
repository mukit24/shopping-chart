{"version":3,"sources":["components/navbar.jsx","components/forms.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","class","className","this","props","totalProduct","Component","Forms","handleChange","event","value","target","setState","product_name","id","id_num","onFormSubmit","preventDefault","handleSubmit","state","initialState","onSubmit","for","type","name","onChange","Counter","style","display","counter","changeBadgeColor","formatCount","onClick","clickIncrement","clickDelete","classes","Counters","onDelete","onIncrement","onReset","counters","map","key","App","handleIncrement","index","indexOf","handleReset","c","handleDelete","counterId","filter","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b132382e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <nav class=\"navbar navbar-light bg-light\">\r\n        <span class=\"navbar-brand mb-0 h1\">Total Products <span className=\"badge badge-secondary\">{this.props.totalProduct}</span></span>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\r\n\r\nclass Forms extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.initialState = {\r\n            id: 0,\r\n            value: 0,\r\n            product_name: ''\r\n        };\r\n\r\n        this.state = this.initialState;\r\n\r\n    }\r\n    handleChange = event => {\r\n        const { value } = event.target;\r\n\r\n        this.setState({\r\n            product_name : value,\r\n            id:this.props.id_num+1\r\n        });\r\n    }\r\n    onFormSubmit = event => {\r\n        event.preventDefault();\r\n        this.props.handleSubmit(this.state);\r\n        this.setState(this.initialState);\r\n    }\r\n    render() { \r\n        const { product_name } = this.state\r\n        return ( \r\n            <form onSubmit={this.onFormSubmit}>\r\n                <label for=\"name\">Product Name: </label>\r\n                <input \r\n                    type=\"text\" \r\n                    name=\"product_name\" \r\n                    id=\"product_name\"\r\n                    value={product_name} \r\n                    onChange={this.handleChange} />\r\n                <button className=\"btn btn-primary m-2\" type=\"submit\">\r\n                    Submit\r\n                </button>\r\n            </form>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Forms;","import React, { Component } from 'react';\r\nclass Counter extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4 style={{ display:\"inline-block\" }}>{this.props.counter.product_name} <span  className={this.changeBadgeColor()}>{this.formatCount()}</span></h4>\r\n        <button  onClick={()=>this.props.clickIncrement(this.props.counter)} className=\"m-2 btn btn-primary\">Increment Quantity</button>\r\n        <button onClick={()=>this.props.clickDelete(this.props.counter.id)} className=\"m-2 btn btn-danger\">Delete</button>\r\n        <hr/>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  changeBadgeColor() {\r\n    let classes = \"m-2 badge badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"success\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"0\" : value;\r\n  }\r\n}\r\n \r\nexport default Counter;   ","import React, { Component } from 'react';\r\nimport Counter from './counter';\r\n\r\nclass Counters extends Component {\r\n  \r\n  render() {\r\n      const {onDelete,onIncrement,onReset,counters}=this.props;\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-secondary m-2\">\r\n          Reset Quantity To Zero\r\n        </button>\r\n        <h3>Product List</h3>\r\n        <hr/>\r\n        {counters.map((counter) => (\r\n          <Counter\r\n            key={counter.id}\r\n            counter={counter}\r\n            clickDelete={onDelete}\r\n            clickIncrement={onIncrement}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default Counters;","import React, { Component } from 'react';\n// import \"./App.css\";\nimport Navbar from \"./components/navbar\";\nimport Forms from './components/forms';\nimport Counters from \"./components/counters\";\n// import { render } from \"@testing-library/react\";\n\nclass App extends Component {\n  state = {\n    counters: [ ],\n  };\n\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index].value++;\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters });\n  };\n  handleSubmit = name => {\n    this.setState({counters: [...this.state.counters,name]});\n  }\n\n  render(){\n    return (\n      <div>\n        <Navbar totalProduct={this.state.counters.length} />\n        <div className=\"container\">\n          <h3>Add New Product:</h3>\n          <Forms handleSubmit={this.handleSubmit} id_num={this.state.counters.length}/>\n          <Counters\n            onIncrement={this.handleIncrement}\n            onReset={this.handleReset}\n            onDelete={this.handleDelete}\n            counters={this.state.counters}\n          />\n        </div>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}